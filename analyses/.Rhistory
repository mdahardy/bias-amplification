summarize_choice_data('condition') %>%
refactor_condition(c('Asocial control','Social control','Asocial bias','Social bias')) %>%
ggplot(aes(condition,y=bias,fill=condition)) +
geom_bar(stat='identity') +
scale_fill_manual("legend", values = condition_colors)+
scale_x_discrete(labels=condition_names_with_breaks) +
geom_errorbar(aes(ymin=bias-bias_se,ymax=bias+bias_se),width=0.2) +
geom_signif(y_position = c(0.654,0.644,0.634,0.5875,0.5775), xmin = c(1,2,3,1,2),
xmax = c(4,4,4,3,3), annotation = rep('***',5),
textsize=7,vjust=0.5) +
ylab('Proportion of biased choices') +
coord_cartesian(ylim=c(0.5,0.656)) +
theme_styling() +
barplot_styling()
bias_plot
# Save
paste0(plots_directory,'bias.pdf') %>%
ggsave(bias_plot,width=plots_width,height=plots_height,units=plots_units)
# Accuracy bar plot
accuracy_plot = e1_data %>%
mutate(true_color = ifelse(proportion_green>0.5,'green','blue'),
matched = randomization_color == true_color) %>%
subset(is_cloned == F) %>%
summarize_choice_data(c('condition','matched')) %>%
refactor_condition(c('Asocial control','Social control','Asocial bias','Social bias')) %>%
ggplot(aes(x=condition,y=accuracy,fill=condition)) +
geom_bar(stat='identity') +
scale_fill_manual("legend", values = condition_colors)+
scale_x_discrete(labels=condition_names_with_breaks) +
#geom_errorbar(aes(ymin=accuracy-accuracy_se,ymax=accuracy+accuracy_se),width=0.2) +
# geom_signif(y_position = c(0.6675,0.6675,0.6735,0.6795), xmin = c(1,2.05,3,1),
#            xmax = c(1.95,3,4,4), annotation = rep('***',4),
#            textsize=7,vjust=0.5) +
ylab('Proportion of correct choices') +
#coord_cartesian(ylim=c(0.59,0.6825))+
facet_grid(rows=vars(matched))+
theme_styling() +
barplot_styling()
accuracy_plot
# Save
paste0(plots_directory,'accuracy.pdf') %>%
ggsave(accuracy_plot,width=plots_width,height=plots_height,units=plots_units)
bias_by_generation = e1_data %>%
summarize_choice_data(c('condition','generation')) %>%
mutate(alpha_scale=ifelse(condition=='Asocial control','Dark','Light'),
generation = generation+1) %>%
ggplot(aes(x=generation,y=bias,fill=condition,color=condition,shape=condition)) +
geom_ribbon(aes(ymin=bias-bias_se, ymax=bias+bias_se,alpha=alpha_scale),colour=NA) +
geom_line(size=1)+
geom_point(size=4.95,color='black') +
labs(x='Generation',y="Proportion of biased choices")+
scale_alpha_manual(values=c('Dark'=0.55,'Light'=0.2))+
scale_color_manual("legend", values = condition_colors)+
scale_fill_manual("legend", values = condition_colors)+
scale_shape_manual("legend", values = condition_shapes)+
scale_x_continuous(breaks = 1:8,expand=c(0,0)) +
#scale_y_continuous(breaks = c(0.52,0.55,0.58)) +
theme_styling() +
theme(strip.background = element_blank(),
strip.text.x = element_blank(),
panel.grid.major = element_line(colour = "#ededed"),
legend.position='none')
bias_by_generation
# Save
paste0(plots_directory,'bias_by_generation.pdf') %>%
ggsave(bias_by_generation,width=16,height=13,units=plots_units)
accuracy_by_generation = e1_data %>%
summarize_choice_data(c('condition','generation')) %>%
mutate(alpha_scale=ifelse(condition=='Asocial control','Dark','Light'),
generation=generation+1) %>%
ggplot(aes(x=generation,y=accuracy,fill=condition,color=condition,shape=condition)) +
geom_ribbon(aes(ymin=accuracy-accuracy_se, ymax=accuracy+accuracy_se,alpha=alpha_scale),colour=NA) +
geom_line(size=1)+
geom_point(size=4.95,color='black') +
labs(x='Generation',y="Proportion of correct choices")+
scale_alpha_manual(values=c('Dark'=0.55,'Light'=0.2))+
scale_color_manual("legend", values = condition_colors)+
scale_fill_manual("legend", values = condition_colors)+
scale_shape_manual("legend", values = condition_shapes)+
scale_x_continuous(breaks = 1:8,expand=c(0,0)) +
scale_y_continuous(breaks = c(0.58,0.62,0.66,0.7)) +
theme_styling() +
theme(strip.background = element_blank(),
strip.text.x = element_blank(),
panel.grid.major = element_line(colour = "#ededed"),
legend.position='none')
accuracy_by_generation
# Save
paste0(plots_directory,'accuracy_by_generation.pdf') %>%
ggsave(accuracy_by_generation,width=16,height=13,units=plots_units)
library(here)
library(here)
library(lme4)
library(dplyr)
source('../utils.R') # helper functions
# Directory to write the results (matched and nonmatched described below)
matched_directory = '../stats/e1_exploratory/matched'
nonmatched_directory = '../stats/e1_exploratory/nonmatched'
# Dependent variables to investigate
dependent_variables = c('chose_correct','chose_bias')
# glmer or lmer, depending on type of dependent_variables
regression_type = 'glmer'
# The formula for the glmer that all models share
common_model_formula = '+(1|condition_replication)'
# Addition to common_formula for pre reg models
addition_for_prereg = '+ (1 | participant_id)'
# Load experiment 1 data
e1_data = load_e1_data()
matched_data = subset(e1_data,matched==T)
nonmatched_data = subset(e1_data,matched==F)
# First get condition comparisons for matched trials
matched_comparisons = matched_data %>%
compare_conditions(dependent_variables,regression_type,common_model_formula,addition_for_prereg) %>%
mutate(matched=T)
# Now get condition comparisons for unmatched trials
nonmatched_comparisons = nonmatched_data %>%
compare_conditions(dependent_variables,regression_type,common_model_formula,addition_for_prereg) %>%
mutate(matched=F)
# Write test statistics, p values, and condition means for direct use in the paper
print('-- -- -- Writing statistical tests -- -- --')
write_tests(matched_comparisons,matched_directory,F)
write_tests(nonmatched_comparisons,nonmatched_directory,F)
write_tests(matched_comparisons,matched_directory,F)
matched_directory
write_tests(matched_comparisons,matched_directory,F)
matched_directory
make_directory
make_directory(matched_directory)
make_dir_write_stats = function(stats_row,output_directory,statistics_type){
makeDirectory(output_directory)
chi2_function = if (statistics_type=='text') chi2_text_str else chi2_table_str
write_chi2_statistic(stats_row,chi2_function,'reported',output_directory)
write_chi2_statistic(stats_row,chi2_function,'prereg',output_directory)
}
write_tests(matched_comparisons,matched_directory,F)
make_dir_write_stats = function(stats_row,output_directory,statistics_type){
make_directory(output_directory)
chi2_function = if (statistics_type=='text') chi2_text_str else chi2_table_str
write_chi2_statistic(stats_row,chi2_function,'reported',output_directory)
write_chi2_statistic(stats_row,chi2_function,'prereg',output_directory)
}
write_tests(matched_comparisons,matched_directory,F)
write_tests(nonmatched_comparisons,nonmatched_directory,F)
print('-- -- -- Writing means -- -- --')
write_means(matched_data,matched_directory,dependent_variables)
write_means(nonmatched_data,nonmatched_directory,dependent_variables)
# Print condition means for both matched and non-matched trials
print('-- -- -- Means -- -- --')
e1_data %>%
group_by(condition,matched) %>%
summarise(accuracy = mean(chose_correct))
getwd
getwd()
load_e1_data = function(include_cloned = F){
return(
'../data/experiment_1.csv' %>%
read.csv() %>%
transmute(
net_decision_index,
randomization_color,
is_practice = is_practice=='True',
is_cloned = generation == 0 & grepl('SOC',condition,fixed=T),
generation,
condition_replication,
participant_id,
proportion_green = 1-proportion_blue,
green_shown = green_first == 'True',
is_social = grepl('SOC',condition,fixed=T),
chose_bias = as.logical(chose_utility),
chose_correct = as.logical(chose_correct),
chose_green = ifelse(randomization_color=='green',chose_bias,!chose_bias),
k_chose_correct = ifelse(proportion_blue>0.5,8-k_chose_green, k_chose_green),
social_info_accuracy = k_chose_correct/8,
social_info_bias = k_chose_utility/8,
social_info_green = k_chose_green/8,
matched = proportion_utility > 0.5,
condition = case_when(
condition == 'ASO:N-U' ~ 'asocial_control',
condition == 'ASO:W-U' ~ 'asocial_bias',
condition == 'SOC:N-U' ~ 'social_control',
TRUE ~ 'social_bias'
)
) %>%
subset(is_practice == F) %>%
{ if (include_cloned) . else subset(., is_cloned == F) }
)
}
library(ggplot2)
library(dplyr)
library(ggsignif)
library(ggthemes)
# Helper functions
source('utils.R')
source('plotting_utils.R')
getwd()
setwd('/Users/mdhardy/Documents/princeton_research/collective_intelligence/github_repo/analyses')
# Helper functions
source('utils.R')
source('plotting_utils.R')
# The units for defining the dimensions of the plots: cm is centimeters
plots_units = 'cm'
# The height in plots_units for saving the figures
plots_height = 13
# The width in plots_units for saving the figures
plots_width = 14
# Fill colors for each condition in the bar plots
plot_colors = get_plot_colors(2)
# Add line breaks for better styling
condition_names_with_breaks = c('Asocial\nbias','Social\nbias','Social\nresampling')
# The directory where the plots should be saved
plots_directory = '../../paper/plots/e2/'
# Make this directory if it doesn't exist
make_directory(plots_directory)
# Colors
plot_colors = get_plot_colors(2)
condition_colors = plot_colors$condition_colors
blue_green_colors = plot_colors$blue_green_colors
# Condition shapes
condition_shapes = c(
'Asocial bias' = 21,
'Social bias' = 22,
'Social resampling'=24)
# All e2 data
e2_data = load_e2_data(include_cloned = T) %>%
pretty_condition_names()
### --- Choice data for comparing original vs. resampled choices --- ###
original_choice_data = e2_data %>%
subset(condition == 'Social resampling') %>%
summarize_choice_data(c('generation','network_identifier','randomization_color')) %>%
mutate(type='original')
resampled_choice_data = e2_data %>%
subset(condition == 'Social resampling') %>%
subset(generation>1) %>%
group_by(generation,network_identifier,randomization_color) %>%
summarize(
n=n(),
bias = mean(social_info_bias),
bias_se = sqrt(var(social_info_bias) / n),
green = mean(social_info_green),
green_se = sqrt(var(social_info_green) / n),
accuracy = mean(social_info_accuracy),
accuracy_se = sqrt(var(social_info_accuracy) / length(accuracy)),
) %>%
mutate(generation = generation -1,type = 'resampled')
choice_data = rbind(original_arrow_data,resampled_arrow_data) %>%
arrange(match(randomization_color, c('green','blue'))) %>%
mutate(randomization_color = factor(randomization_color,levels=c('green','blue')))
### --- Organize choice_data differently for scatter plots --- ###
original_data = choice_data %>%
subset(generation<8) %>%
subset(type=='original') %>%
transmute(
generation_network = paste(generation,network_identifier,sep='-'),
network_identifier,
randomization_color,
original_bias = bias,
original_bias_se = bias_se,
original_green = green,
original_green_se = green_se
)
# The units for defining the dimensions of the plots: cm is centimeters
plots_units = 'cm'
# The height in plots_units for saving the figures
plots_height = 13
# The width in plots_units for saving the figures
plots_width = 14
# Fill colors for each condition in the bar plots
plot_colors = get_plot_colors(2)
# Add line breaks for better styling
condition_names_with_breaks = c('Asocial\nbias','Social\nbias','Social\nresampling')
# The directory where the plots should be saved
plots_directory = '../../paper/plots/e2/'
# Make this directory if it doesn't exist
make_directory(plots_directory)
# Colors
plot_colors = get_plot_colors(2)
condition_colors = plot_colors$condition_colors
blue_green_colors = plot_colors$blue_green_colors
# Condition shapes
condition_shapes = c(
'Asocial bias' = 21,
'Social bias' = 22,
'Social resampling'=24)
# All e2 data
e2_data = load_e2_data(include_cloned = T) %>%
pretty_condition_names()
### --- Choice data for comparing original vs. resampled choices --- ###
original_choice_data = e2_data %>%
subset(condition == 'Social resampling') %>%
summarize_choice_data(c('generation','network_identifier','randomization_color')) %>%
mutate(type='original')
resampled_choice_data = e2_data %>%
subset(condition == 'Social resampling') %>%
subset(generation>1) %>%
group_by(generation,network_identifier,randomization_color) %>%
summarize(
n=n(),
bias = mean(social_info_bias),
bias_se = sqrt(var(social_info_bias) / n),
green = mean(social_info_green),
green_se = sqrt(var(social_info_green) / n),
accuracy = mean(social_info_accuracy),
accuracy_se = sqrt(var(social_info_accuracy) / length(accuracy)),
) %>%
mutate(generation = generation -1,type = 'resampled')
choice_data = rbind(original_arrow_data,resampled_arrow_data) %>%
arrange(match(randomization_color, c('green','blue'))) %>%
mutate(randomization_color = factor(randomization_color,levels=c('green','blue')))
choice_data = rbind(original_choice_data,resampled_choice_data) %>%
arrange(match(randomization_color, c('green','blue'))) %>%
mutate(randomization_color = factor(randomization_color,levels=c('green','blue')))
### --- Organize choice_data differently for scatter plots --- ###
original_data = choice_data %>%
subset(generation<8) %>%
subset(type=='original') %>%
transmute(
generation_network = paste(generation,network_identifier,sep='-'),
network_identifier,
randomization_color,
original_bias = bias,
original_bias_se = bias_se,
original_green = green,
original_green_se = green_se
)
resampled_data = arrow_data %>%
subset(generation<8) %>%
subset(type=='resampled') %>%
transmute(
generation_network = paste(generation,network_identifier,sep='-'),
randomization_color,
network_identifier,
resampled_bias = bias,
resampled_bias_se = bias_se,
resampled_green = green,
resampled_green_se = green_se
)
resampled_data = choice_data %>%
subset(generation<8) %>%
subset(type=='resampled') %>%
transmute(
generation_network = paste(generation,network_identifier,sep='-'),
randomization_color,
network_identifier,
resampled_bias = bias,
resampled_bias_se = bias_se,
resampled_green = green,
resampled_green_se = green_se
)
scatter_data = merge(original_data,resampled_data,by='generation_network')
# -- -- -- Data on estimated biases for each participant -- -- -- #
raw_bias_data = '../data/experiment_2_biases.csv' %>%
read.csv() %>%
mutate(node_id = decision_origin_id)
participant_biases= e2_data %>%
subset(is_cloned==F) %>%
transmute(
condition_replication,
randomization_color,
node_id = node_table_id
) %>%
right_join(raw_bias_data,by='node_id') %>% distinct()
# Bias bar plot
bias_plot = e2_data %>%
subset(is_cloned == F) %>%
summarize_choice_data('condition') %>%
ggplot(aes(x=condition,y=bias,fill=condition)) +
geom_bar(stat='identity') +
scale_fill_manual("legend", values = plot_colors$condition_colors)+
geom_errorbar(aes(ymin=bias-bias_se,ymax=bias+bias_se),width=0.2) +
geom_signif(y_position = c(0.575,0.575), xmin = c(1,2.05),
xmax = c(1.95,3), annotation = c('***','**'),
textsize=7,vjust=0.3) +
ylab('Proportion of biased choices') +
coord_cartesian(ylim=c(0.52,0.5772))+
scale_x_discrete(labels=condition_names_with_breaks) +
theme_styling() +
barplot_styling()
bias_plot
# Accuracy bar plot
accuracy_plot = e2_data %>%
subset(is_cloned == F) %>%
summarize_choice_data('condition') %>%
ggplot(aes(x=condition,y=accuracy,fill=condition)) +
geom_bar(stat='identity') +
scale_fill_manual("legend", values = plot_colors$condition_colors)+
geom_errorbar(aes(ymin=accuracy-accuracy_se,ymax=accuracy+accuracy_se),width=0.2) +
geom_signif(y_position = c(0.64,0.65), xmin = c(1,1),
xmax = c(2,3), annotation = c('***','***'),
textsize=7,vjust=0.3) +
ylab('Proportion of correct choices') +
coord_cartesian(ylim=c(0.55,0.6548))+
scale_x_discrete(labels=condition_names_with_breaks)+
theme_styling() +
barplot_styling()
accuracy_plot
social_green_bar = e2_data %>%
subset(is_cloned == F) %>%
summarize_observed_data(c('condition','randomization_color')) %>%
exclude_asocial_data() %>%
ggplot(aes(x=condition,y=social_info_green,fill=randomization_color)) +
geom_bar(stat='identity', position=position_dodge(0.9)) +
geom_errorbar(aes(ymin=social_info_green-social_info_green_se,
ymax=social_info_green+social_info_green_se),
width=0.3,
size=0.75,
position=position_dodge(0.9)) +
scale_fill_manual(name='Bias color', labels=c('Blue','Green'), values = plot_colors$blue_green_colors)+
scale_shape_manual(name='Bias color', labels=c('Blue','Green'),values=c(16,15)) +
scale_x_discrete(labels=c('Social\nbias','Social\nresampling'))+
ylab('Proportion of observed votes for green') +
coord_cartesian(ylim=c(0.31,0.82)) +
scale_y_continuous(expand=c(0,0)) +
theme_styling() +
theme(axis.text.x = element_text(size=16,color='black'),axis.title.x=element_blank())
# Add points for network-generation means
social_green_network_means = e2_data %>%
subset(is_cloned == F) %>%
summarize_observed_data(c('randomization_color','condition','condition_replication','generation')) %>%
exclude_asocial_data() %>%
geom_point(data=.,
aes(x = condition, y = social_info_green,shape=randomization_color),
alpha=0.225,
position = position_jitterdodge(jitter.width = 0.25,dodge.width = 0.9),
size=2.5)
# Put both together
green_votes_barplot = social_green_bar + social_green_network_means +
theme(legend.position = 'none',
panel.grid.major = element_line(colour = "#ededed"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
green_votes_barplot
participant_level_data = e2_data %>%
subset(is_cloned==F) %>%
summarize_observed_data(c('participant_id','randomization_color','condition')) %>%
exclude_asocial_data() %>%
arrange(condition,-social_info_green) %>%
mutate(
observed_green_votes = social_info_green * 8,
green_ordering = rep(1:(n()/2),2)
)
participant_observations = participant_level_data %>%
ggplot(aes(x=green_ordering,y=observed_green_votes/8,fill=randomization_color)) +
geom_bar(stat='identity')+
facet_grid(cols = vars(condition)) +
coord_cartesian(ylim=c(0.31,0.82),expand=c(0,0))+
scale_fill_manual(name='Bias color', labels=c('Blue','Green'),
values = plot_colors$blue_green_colors)+
labs(y='Proportion of observed votes green') +
theme_styling() +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
strip.background = element_blank(),
legend.position = 'none',
panel.spacing =unit(1.25, "lines"),
panel.grid.major = element_line(colour = "#ededed"),
strip.text = element_blank())
participant_observations
bias_scatter = scatter_data %>%
ggplot(aes(x=original_bias,y=resampled_bias,color=randomization_color.x)) +
geom_abline(slope=1, intercept=0)+
geom_point(size=2)+
scale_color_manual(values=blue_green_colors)+
labs(x='Original bias proportion',y='Resampled bias proportion')+
ylim(0.25,0.75)+
xlim(0.25,0.75)+
theme_styling() +
theme(
legend.position='none'
)
bias_scatter
green_network_plot = scatter_data %>%
subset(randomization_color.x=='green') %>%
mutate(condition = ifelse(as.integer(substr(generation_network,0,1))==1,'Asocial bias','Social resampling')) %>%
arrange(desc(row_number())) %>%
ggplot(aes(x=original_bias,y=resampled_bias,fill=condition)) +
geom_hline(yintercept=0.46,size=2.5) +
geom_vline(xintercept=0.46,size=2.5)+
geom_segment(aes(x=0.46,xend=0.8,y=0.46,yend=0.8),linetype='dashed',size=1.25)+
#geom_abline(slope=1, intercept=0,linetype='dashed',size=1.25)+
geom_errorbarh(aes(xmax=original_bias+original_bias_se,
xmin=original_bias-original_bias_se,
height=0.025),
size=1.75,
color='#6e6e6e')+
geom_errorbar(aes(ymax=resampled_bias+resampled_bias_se,
ymin=resampled_bias-resampled_bias_se),
width=0.025,
size=1.75,
color='#6e6e6e') +
geom_point(shape=21,color='#6e6e6e',size=12,stroke=2.5) +
scale_fill_manual(name='Condition',
values = c(condition_colors['Asocial bias'],condition_colors['Social resampling'])) +
#geom_point(color='#a1dab4',size=4) +
#facet_wrap(~ network_identifier.x,scales='free',nrow=1) +
facet_grid(cols=vars(network_identifier.x),scales='free')+
scale_x_continuous(limits=c(0.46,0.8),expand=c(0,0))+
scale_y_continuous(limits=c(0.46,0.8),expand=c(0,0))+
theme_styling() +
labs(x='Bias of original choices',y='Bias of\nresampled choices')+
theme(
strip.text.x = element_blank(),
panel.grid.major = element_line(colour = "#ededed"),
panel.spacing = unit(3, "lines"),
axis.line=element_blank(),
axis.text = element_text(color='black',size=38),
axis.title = element_text(size=42),
axis.ticks = element_line(colour = "black"),
legend.position='none'
)
green_network_plot
